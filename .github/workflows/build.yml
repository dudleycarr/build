name: build
permissions:
  contents: write
  packages: write
on:
  workflow_call:
    inputs:
      repository:
        required: true
        type: string
      ref:
        required: true
        type: string
      release:
        required: true
        type: string
jobs:
  status:
    outputs:
      not-built: "${{ !steps.cache.outputs.cache-hit }}"
    runs-on: ubuntu-latest
    steps:
      - name: Create commit cache directory
        run: |
          mkdir -p commits-cache
      - uses: actions/cache/restore@v3
        id: cache
        with:
          lookup-only: true
          path: commits-cache
          key: ${{ inputs.ref }}.txt

  build-binaries:
    if: ${{ needs.status.outputs.not-built }} == 'true'
    needs: [status]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.20', '1.21']
        arch: [arm64, amd64]
        os: [linux, darwin, freebsd, windows]
    env:
      RELEASE_ID: "${{ inputs.release }}"
      PLATFORM: "go${{ matrix.go-version}}-${{ matrix.os }}-${{ matrix.arch }}"
      GOOS: ${{ matrix.os }}
      GOARCH: ${{ matrix.arch }}
    steps:
      - name: Checkout NSQ
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.ref }}
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "${{ matrix.go-version }}"
      - name: Build binaries
        run: make
      - name: Rename windows binaries
        run: |
          if [ "$GOOS" == "windows" ]; then
            cd build
            for file in *; do
                mv "$file" "${file}.exe"
            done
          fi
      - name: Create tar dir
        run: |
          mkdir -p ${RELEASE_ID}
      - name: Create tar
        run: |
          tar -czvf \
            "${RELEASE_ID}/nsq-${RELEASE_ID}-${PLATFORM}.tar.gz" \
            -C build .
      - name: Upload binaries
        uses: actions/upload-artifact@v3
        with:
          path: ${{ env.RELEASE_ID }}/nsq-*.tar.gz

  docker:
    if: ${{ needs.status.outputs.not-built }} == 'true'
    needs: [status]
    runs-on: ubuntu-latest
    env:
      RELEASE_ID: "${{ inputs.release }}"
    steps:
      - name: Checkout NSQ
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.ref }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner}}/nsq:latest
            ghcr.io/${{ github.repository_owner }}/nsq:${{ inputs.release }}

  release:
    needs: [status, build-binaries, docker]
    runs-on: ubuntu-latest
    steps:
      - name: Download binaries
        id: artifacts
        uses: actions/download-artifact@v3
        with:
          path: "${{ inputs.release }}"
      - id: files
        run: |
          echo "FILES<<EOF" >> $GITHUB_OUTPUT
          echo "$(ls -1 $RELEASE_ID/**/nsq-*.tar.gz)" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "${{ inputs.release }}"
          body: |
            ### Commits
            https://github.com/${{ inputs.repository }}/commits/${{ inputs.ref }}
            
            ### Docker Images
            ghcr.io/${{ github.repository_owner }}/nsq:${{ inputs.release }}
          files: "${{ steps.files.outputs.FILES }}"

  cache-commit-sha:
    needs: [status, release]
    runs-on: ubuntu-latest
    steps:
      - run: |
          mkdir -p commits-cache
          touch commits-cache/${{ inputs.ref }}.txt
      - uses: actions/cache/save@v3
        with:
          path: commits-cache
          key: ${{ inputs.ref }}.txt
